// <auto-generated />
using System;
using GoodReads.Infrastructure.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GoodReads.Infrastructure.EntityFramework.Migrations.Books
{
    [DbContext(typeof(BooksContext))]
    partial class BooksContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("books")
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GoodReads.Domain.BookAggregate.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Author");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("Gender");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ISBN");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("Isbn")
                        .IsUnique();

                    b.ToTable("Books", "books");
                });

            modelBuilder.Entity("GoodReads.Domain.BookAggregate.Entities.Book", b =>
                {
                    b.OwnsOne("GoodReads.Domain.BookAggregate.ValueObjects.BookData", "BookData", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<Guid>("BookId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Pages")
                                .HasColumnType("integer")
                                .HasColumnName("Pages");

                            b1.Property<string>("Publisher")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Publisher");

                            b1.Property<int>("YearOfPublication")
                                .HasColumnType("integer")
                                .HasColumnName("YearOfPublication");

                            b1.HasKey("Id");

                            b1.HasIndex("BookId")
                                .IsUnique();

                            b1.ToTable("BookDatas", "books");

                            b1.WithOwner()
                                .HasForeignKey("BookId");
                        });

                    b.OwnsOne("GoodReads.Domain.BookAggregate.ValueObjects.MeanScore", "MeanScore", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<Guid>("BookId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Scores")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Scores");

                            b1.HasKey("Id");

                            b1.HasIndex("BookId")
                                .IsUnique();

                            b1.ToTable("MeanScores", "books");

                            b1.WithOwner()
                                .HasForeignKey("BookId");
                        });

                    b.OwnsMany("GoodReads.Domain.BookAggregate.ValueObjects.RatingId", "RatingIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("BookId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("BookRatingId");

                            b1.HasKey("Id");

                            b1.HasIndex("BookId");

                            b1.ToTable("BookRatingIds", "books");

                            b1.WithOwner()
                                .HasForeignKey("BookId");
                        });

                    b.Navigation("BookData")
                        .IsRequired();

                    b.Navigation("MeanScore")
                        .IsRequired();

                    b.Navigation("RatingIds");
                });
#pragma warning restore 612, 618
        }
    }
}
